import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl

  // Define public routes that don't require authentication
  const publicRoutes = ['/login', '/signup', '/terms', '/privacy', '/ferpa']
  const isPublicRoute = publicRoutes.some(route => pathname === route)

  // If at root, redirect to login
  if (pathname === '/') {
    const redirectUrl = request.nextUrl.clone()
    redirectUrl.pathname = '/login'
    return NextResponse.redirect(redirectUrl)
  }

  // Allow public routes
  if (isPublicRoute) {
    return NextResponse.next()
  }

  // Check for Supabase auth cookies (basic check without using Supabase client)
  const hasAuthCookie = request.cookies.has('sb-auth-token') || 
                       request.cookies.has('supabase-auth-token') ||
                       // Check for the new cookie format
                       Array.from(request.cookies.getAll()).some(cookie => 
                         cookie.name.includes('supabase') && cookie.name.includes('auth-token')
                       )

  // If no auth cookie and trying to access protected route, redirect to login
  if (!hasAuthCookie) {
    console.log('No auth cookie, redirecting to login')
    const redirectUrl = request.nextUrl.clone()
    redirectUrl.pathname = '/login'
    return NextResponse.redirect(redirectUrl)
  }

  // For authenticated users, the SEA and subscription checks will happen
  // in the server components to avoid Edge Runtime issues
  return NextResponse.next()
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|api|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}